package org.scnsoft.fidekmp.ui.postlogin.cellar

import androidx.compose.animation.animateContentSize
import androidx.compose.animation.core.Spring
import androidx.compose.animation.core.spring
import androidx.compose.foundation.Image
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.Card
import androidx.compose.material.Scaffold
import androidx.compose.material.Surface
import androidx.compose.material.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableFloatStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavHostController
import org.scnsoft.fidekmp.ui.login.SupportTextView
import org.scnsoft.fidekmp.ui.theme.Gray16
import org.scnsoft.fidekmp.ui.theme.listBackColor50
import org.scnsoft.fidekmp.ui.theme.seccondaryButtonColor
import org.scnsoft.fidekmp.ui.theme.textExplanationStyle12
import org.scnsoft.fidekmp.ui.theme.textHeaderStyle
import org.scnsoft.fidekmp.ui.theme.textHeaderStyle14
import org.scnsoft.fidekmp.ui.theme.textHeaderStyle16
import org.scnsoft.fidekmp.ui.utils.BottomNavBar
import org.scnsoft.fidekmp.ui.utils.CustomToolbarWithBackArrow
import org.scnsoft.fidekmp.ui.utils.RoundButtonView

@SuppressLint("UnusedMaterialScaffoldPaddingParameter")
@Composable
fun RateWineScreen(
    navController: NavHostController?,
    homeViewModel: MainViewModel,
) {
    Timber.d("RateWineView ")
    val wineDetailInfo by homeViewModel.wineDetailInfoState.collectAsState()
    val profileInfo by homeViewModel.profileInfo.collectAsState()
    Scaffold(
        topBar = {
            CustomToolbarWithBackArrow(
                title = wineDetailInfo.itemName,
                navController = navController!!,
//                backGroundColor = seccondaryButtonColor
            )
        },
        bottomBar = { BottomNavBar(navController = navController, profileInfo.userType, profileInfo.permissions) },
        content = {
            RateWineView(wineDetailInfo, navController, homeViewModel)
        },
        // Use `FloatingActionButton` rather than `ExtendedFloatingActionButton` for full control on
        // how it should animate.

    )
}

@Composable
fun RateWineView(wineDetailInfo: PackageItem, navController: NavHostController?,
                 homeViewModel: MainViewModel?
) {
    var ratingVal by remember {
        mutableFloatStateOf(0.0f)
    }
Column(
    modifier = Modifier
        .fillMaxSize()
        .padding(all = 16.dp)
        .verticalScroll(rememberScrollState()),
    verticalArrangement = Arrangement.Top,
    horizontalAlignment = Alignment.CenterHorizontally
) {
    RateWineInfoCard(wineDetailInfo)
    Text(
        stringResource(id = R.string.rate_the_wine),
        modifier = Modifier.padding(top = 12.dp, bottom = 8.dp),
        color = Gray16,
        style = textHeaderStyle16,
    )
    Text(
        stringResource(id = R.string.how_much_did_you_enjoy_the_wine),
        modifier = Modifier.padding(top = 24.dp, bottom = 8.dp),
        color = Gray16,
        style = textHeaderStyle14,
    )
    RatingBar(
        value = ratingVal,
//        modifier =  Modifier
//            .fillMaxWidth(),

        numOfStars = 5,
        size = 40.dp,
        painterEmpty = painterResource(id = R.drawable.ic_star_empty),
        painterFilled = painterResource(id = R.drawable.ic_star_fill),
        onValueChange = {
//            ratingVal = it
            Timber.d("onValueChange: $it")
        },
        onRatingChanged = {
            ratingVal = it
            Timber.d("onRatingChanged: $it")
        }
    )
    Text(
        stringResource(id = R.string.tell_us_few_words_about_the_wine),
        modifier = Modifier.padding(top = 40.dp, bottom = 8.dp),
        color = Gray16,
        style = textHeaderStyle14,
    )
    SupportTextView(
        Modifier,//.bringIntoViewOnFocus(scope, emailBringIntoViewRequester),
        { Timber.d("onSupportTextValueChanged $it") }//viewModel::onSupportTextValueChanged,
    )
    Spacer(modifier = Modifier.height(32.dp))
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .padding(vertical = 24.dp)
    ) {
        RoundButtonView(
            text = stringResource(id = R.string.cancel),
            modifier = Modifier
                .padding(end = 8.dp)
                .weight(1f),
            color = seccondaryButtonColor,
            enabled = true,
            onClick = {
                navController?.popBackStack()
            })
        RoundButtonView(
            text = stringResource(id = R.string.send),
            modifier = Modifier
                .padding(bottom = 16.dp, start = 8.dp)
                .weight(1f),
            enabled = true,
            onClick = {
//                        navController?.navigate(AppScreens. CreatePassport.route +"/${livrable}/${objectToJsonEx(data[0].wines)}")
            })
    }

    }
}

@Composable
fun RateWineInfoCard(item: PackageItem, backColor: Color = listBackColor50, onItemClick: ((PackageItem) -> Unit)? = null) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(4.dp),
        shape = RoundedCornerShape(8.dp),
        backgroundColor = backColor,
        elevation = 0.dp
    ) {
        Column(
            modifier = Modifier
//                .padding(20.dp)
                .clickable {
                    onItemClick?.invoke(item)
                }
                .animateContentSize(
                    animationSpec = spring(
                        dampingRatio = Spring.DampingRatioMediumBouncy,
                        stiffness = Spring.StiffnessLow
                    )
                )
        ) {
            Row(verticalAlignment = Alignment.CenterVertically) {
                Image(
                    painter = painterResource(id = R.drawable.bottle_wine),
                    contentDescription = null,
                    contentScale = ContentScale.Fit,
//                    colorFilter = ColorFilter.tint(
//                        colorResource(id = R.color.primaryColor),
//                    ),
                    modifier = Modifier
                        .size(40.dp)
//                        .clip(RoundedCornerShape(50)),
                )
                Spacer(modifier = Modifier.width(8.dp))
                Column {
                    Text(
                        text = item.itemName,
                        style = textHeaderStyle
                    )
                    Text(text = item.itemData,
                        style = textExplanationStyle12
                    )
                }
//                Spacer(modifier = Modifier.width(30.dp))
//                Image(
//                    Icons.Filled.KeyboardArrowRight,
//                    contentDescription = null,
//                    contentScale = ContentScale.Fit,
//                    colorFilter = ColorFilter.tint(primaryColor),
//                    modifier = Modifier
//                        .fillMaxWidth()
//                        .size(24.dp),
//                    alignment = Alignment.CenterEnd )
//
//
            }
        }
    }

}

@Preview(name = "ProfileSupportView")
@Composable
private fun PreviewRateWineView() {
    Surface(contentColor = Color.White) {
        val pkg = PackageItem( "Chateau Léoville Poyferré (2002)", "Chateau Léoville Poyferré | qty: 1 | €300.50")
        RateWineView(pkg, null, null)
    }
}